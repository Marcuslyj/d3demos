/*    @Description：风险预测，折线图    @author: liyongjie*/export class LineChart {    public svg;    public windowWidth = window.innerWidth;    public margin: any = {        left: this.windowWidth * .1,        right: this.windowWidth * .06,        top: this.windowWidth * .08,        bottom: this.windowWidth * 0.15    };    //svg宽高    public width = this.windowWidth - this.margin.left - this.margin.right;    public height = this.width * .6;    //时长    public duration = 1000;    constructor(svg) {        this.svg = svg;        this.drawLineChart();    }    //创建坐标系    drawLineChart() {        let _this = this;        //x轴分布        let x = d3.scale.linear()            .range([0, _this.width]);        //y轴分布        let y = d3.scale.linear()            .range([_this.height, 0]);        //        let xAxis = d3.svg.axis()            .scale(x)            .orient("bottom")            .ticks(5);        //        let yAxis = d3.svg.axis()            .scale(y)            .orient("left")            .ticks(5)            .tickFormat(function (v) {                return v * 100 + "%";            });        let g_main = _this.svg            .attr("width", _this.width + _this.margin.left + _this.margin.right)            .attr("height", _this.height + _this.margin.top + _this.margin.bottom)            .append("g").classed("g_main", true)            .attr("transform", "translate(" + _this.margin.left + "," + _this.margin.top + ")");        x.domain([0, 100]);        y.domain([0, 1]);        //绘制x轴        g_main.append("g").attr("class", "x axis")            .attr("transform", "translate(0," + _this.height + ")")            .call(xAxis);        //绘制y轴        g_main.append("g")            .attr("class", "y axis")            .call(yAxis);        //绘制网格        let g_webLines_h = g_main.append("g").classed("g_webLines_h", true);        for (let i = 0; i < 5; i++) {            g_webLines_h.append("line").classed("webLines_h", true)                .attr("x1", 0)                .attr("y1", function () { return _this.height / 5 * i; })                .attr("x2", _this.width)                .attr("y2", function () { return _this.height / 5 * i })                .attr("stroke", "#ddd")                .attr("stroke-dasharray", "8 3")                .attr("stroke-width", "1px");        }        let g_webLines_v = g_main.append("g").classed("g_webLines_v", true);        for (let i = 0; i < 10; i++) {            g_webLines_v.append("line").classed("webLines_v", true)                .attr("x1", function () { return _this.width / 10 * (i + 1); })                .attr("y1", 0)                .attr("x2", function () { return _this.width / 10 * (i + 1); })                .attr("y2", _this.height)                .attr("stroke", "#ddd")                .attr("stroke-width", "1px");        }    }    //方法：取颜色    public getColor(idx) {        let palette = [            '#f2862f', '#43cd8a', '#4496d5', '#d297ea'        ]        return palette[idx % palette.length];    }    drawLine(data) {        let _this = this;        //x轴分布        let x = d3.scale.linear()            .range([0, _this.width])            .domain([0, 100]);        //y轴分布        let y = d3.scale.linear()            .range([_this.height, 0])            .domain([0, 1]);        let g_main = _this.svg.select(".g_main");        let g_lines = g_main.append("g").classed("g_lines", true);        let line = d3.svg.line()                .x(function (d) {                    return x(d.x);                })                .y(function (d) {                    return y(d.y);                });        g_lines.selectAll(".linePkg")            .data(data)            .enter()            .append("g").classed("linePkg", true)            //透明度设为0            //.style("opacity", 0)            .append("path").classed("line", true)            .attr("stroke", function (e, i) {                return _this.getColor(i);            })            .datum(function (d) {                return d.points;            })            .attr("d", line)            .attr("stroke-width", ".1rem")            .attr("stroke-dasharray", function () {                //获取路径的总长度                return this.getTotalLength();            })            .attr("stroke-dashoffset", function () {                return this.getTotalLength();            })            ;        let linePkgs = g_lines.selectAll(".linePkg");        let circles = linePkgs.selectAll(".circle")            .data(function (d) { return d.points; })            .enter().append("circle")            .attr("class", "circle")            .attr("fill", "#fff")            .attr("stroke", function () {                let g_parent = d3.select(this.parentNode);                let color = g_parent.select("path").attr("stroke");                return color;            })            .attr("r", ".15rem")            .attr("stroke-width", ".1rem")            .attr("cx", function (d) { return x(d.x) })            .attr("cy", function (d) { return y(d.y) });        //透明度设为1        //linePkgs        // .transition().duration(_this.duration).style("opacity", 1)        // //清掉行内样式，以免影响样式控制        // .transition().style("opacity", "")        //;        //画线动态效果        g_lines.selectAll("path")            .transition()            .ease("linear")            .duration(_this.duration)            .attr("stroke-dashoffset", "0");        //图例        let g_legend = _this.svg.append("g").classed("g_legend", true)            .attr("transform", "translate(" + _this.margin.left * 1.25 + "," + _this.margin.top * .5 + ")");        g_legend.selectAll(".legendPkg")            .data(data)            .enter()            .append("g").classed("legendPkg", true)            .attr("transform", function (d, i) {                //第四个图例的位置特殊处理                return "translate(" + _this.width * (.22 + Math.max(0, (i - 1)) * .015) * i + ",0)";            })            .append("text")            .attr("font-size", ".64rem")            .attr("fill", "#666")            .text(function (d) {                return d.name;            });        let legendPkgs = g_legend.selectAll(".legendPkg");        //绘制隐形矩形，扩大可点击区域        legendPkgs.append("rect")            .attr("x", "-.8rem")            .attr("y", "-.8rem")            .attr("width", _this.width * .15)            .attr("height", "1.5rem")            .attr("fill", "rgba(0,0,0,0)")        legendPkgs            .append("rect")            .attr("x", "-.65rem")            .attr("y", "-.55rem")            .attr("width", ".6rem")            .attr("height", ".6rem")            .attr("rx", ".1rem")            .attr("ry", ".1rem")            .attr("fill", function (d, i) {                return _this.getColor(i);            });        //点击事件        legendPkgs.on("click", function (e, i) {            let hideFlag = true;            let linePkg = d3.select(linePkgs[0][i]);            if (linePkg.attr("class").indexOf("hide") != -1) {                hideFlag = false;            } else {                hideFlag = true;            }            linePkg.classed("hide", hideFlag);        });        //注释        let g_note = _this.svg.append("g").classed("g_note", true)            .attr("transform", "translate(" + _this.windowWidth / 2 + "," + _this.svg.attr("height") * .95 + ")");        let g_note_line = g_note.append("line")            .attr("stroke", "#eee")            .attr("stroke-width", "1rem")            .style("stroke-linecap", "round")            .attr("x1", -_this.windowWidth * .185)            .attr("x2", _this.windowWidth * .185)            ;        let g_note_text = g_note.append("text")            .style("text-anchor", "middle")            .style("font-size", ".64rem")            .attr("y", ".25rem")            .attr("fill", "#666")            .text("注：横坐标代表企业风险等级段")            ;    }}
