/*    @Description：风险预测，仪表图    @author: liyongjie*/export class MeterChart {    public svg;    public data;    public width = window.innerWidth;    public height = this.width * .63;    public radius = this.width * .24;    public outerRadius = this.radius;    public innerRadius = this.radius * .9;    public lineRadius = this.radius * 1.08;    public textRadius = this.radius * .72;    public dotRadius = this.radius * 0.045;    public arcRange;    //时长    public duration = 1000;    //    public rateLineWidth = this.width * .63;    //字体颜色标尺    public colorScale = d3.scale.linear()        .domain([0,50,100])        .range(["#2ac32c","#ffa500","#f43022"]);    //svg    //[arcMin,arcMax]    constructor(svg, arcRange = [Math.PI * 1.4, Math.PI * 2.6]) {        this.svg = svg;        this.arcRange = arcRange;    }    //方法：根据评分计算圆点旋转角度    rotateAngel_dot(value) {        return this.radianToAngel(this.arcRange[1] - this.arcRange[0]) / 10 * value;    }    //方法：画仪表图    drawMeterChart() {        let _this = this;        //g_main        let g_main = _this.svg            .attr("width", _this.width)            .attr("height", _this.height)            .append("g")            .classed("g_main", true)            .attr("transform", "translate(" + _this.width / 2 + "," + _this.height*.45 + ")")        //定义圆环轨迹        let arc = d3.svg.arc()            .startAngle(function () {                return _this.arcRange[0];            })            .endAngle(function () {                return _this.arcRange[1];            })            .innerRadius(function () {                return _this.innerRadius;            })            .outerRadius(function () {                return _this.outerRadius;            });        //画渐变色圆环        let g_gradient = g_main.append("g").classed("g_gradient", true).attr("transform", "rotate(" + _this.radianToAngel(_this.arcRange[0] - 2 * Math.PI) + ")");        let endAngle = 0;        let angel_cell_count = 60;        let angel_cell = (_this.arcRange[1] - _this.arcRange[0]) / angel_cell_count;        for (var i = 0; i < angel_cell_count; i++) {            g_gradient.append("path")                .attr("d", d3.svg.arc()                    .startAngle(function () {                        //开始角度往左偏一点，防止看到间隙                        return endAngle === 0 ? endAngle : endAngle - angel_cell*.1;                    })                    .endAngle(function () {                        return endAngle + angel_cell;                    })                    .innerRadius(function () {                        return _this.innerRadius;                    })                    .outerRadius(function () {                        return _this.outerRadius;                    })                )                .attr("fill", _this.colorScale(i * 100 / angel_cell_count));            endAngle += angel_cell;        }        //定义圆弧轨迹        let arcLine = d3.svg.arc()            .startAngle(function () {                return _this.arcRange[0];            })            .endAngle(function () {                return _this.arcRange[1];            })            .innerRadius(function () {                return _this.lineRadius;            })            .outerRadius(function () {                return _this.lineRadius;            });        //画圆弧        g_main.append("path")            .attr("d", arcLine)            .attr("stroke", "#bad7fe")            .attr("stroke-width", _this.dotRadius * .5);        //画圆点        let g_dot = g_main.append("g")            .classed("g_dot", true);        let dot_y = _this.lineRadius * Math.cos(_this.arcRange[0] - Math.PI);        let dot_x = -1 * _this.lineRadius * Math.sin(_this.arcRange[0] - Math.PI);        g_dot.append("circle")            .attr("cx", dot_x)            .attr("cy", dot_y)            .attr("r", _this.dotRadius)            .attr("stroke","#fff")            .attr("stroke-width","1px")            .attr("fill", "#9ec5f9");        //刻度线        let g_scale = g_main.append("g").classed("g_scale", true);        let data_scale = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];        g_scale.selectAll("g line")            .data(data_scale)            .enter()            .append("g").classed("linePkg", true)            .attr("transform", function (d) {                return "rotate(" + _this.rotateAngel_dot(d) + ")";            })            .append("line")            .attr("x1", 0)            .attr("y1", 0)            .attr("x2", -1 * _this.outerRadius * Math.sin(_this.arcRange[0] - Math.PI))            .attr("y2", _this.outerRadius * Math.cos(_this.arcRange[0] - Math.PI))            .attr("stroke", function (d) {                if (d == 0 || d == 10) {                    return "rgba(255,255,255,0)";                }                else {                    return "#fff";                }            })            .attr("stroke-width", "1px");        //刻度线值        let linePkgs = d3.selectAll(".linePkg");        linePkgs.append("g")            .attr("transform", "translate(" + -1 * _this.textRadius + "," + _this.textRadius * Math.cos(_this.arcRange[0] - Math.PI) + ")")            .append("text")            .text(function (d) {                return d;            })            .attr("transform", "rotate(" + _this.radianToAngel(_this.arcRange[0]) + ")")            .attr("text-anchor", "middle")            .attr("font-size", ".6rem");        //分值text        let text_goal = g_main.append("text")            .classed("text_goal", true)            //.attr("y", -_this.radius * .1)            .attr("font-size", "1.6rem")            .attr("fill", "#ff4d32")            .attr("text-anchor", "middle")            .text("0级")            ;        //title        g_main.append("text")            .attr("font-size", ".96rem")            .attr("fill", "#808080")            .attr("text-anchor", "middle")            .text("风险等级")            .attr("y", _this.radius * .25);        //大标题        g_main.append("text")            .attr("font-size", "1.08rem")            .attr("fill", "#808080")            .attr("text-anchor", "middle")            .text("企业风险等级")            .attr("y", _this.radius * 1.35);    }    //方法：初始化评分    goalInit(value: number) {        if(value ===undefined || value ===null){            return ;        }        let _this = this;        let goal = 0;        let g_dot = d3.select(".g_dot");        let text_goal = d3.select(".text_goal");        let text_desc = d3.select(".text_desc");        let rotateAngel = _this.rotateAngel_dot(value);        //分解旋转角度（因为超180度，旋转方向会取反）        if (rotateAngel > 180) {            g_dot.transition().ease("linear")                .duration(_this.duration * 90 / rotateAngel)                .attr("transform", "rotate(" + 90 + ")").transition().ease("linear")                .duration(_this.duration * (1 - 90 / rotateAngel))                .attr("transform", "rotate(" + (rotateAngel) + ")");        } else {            g_dot.transition().duration(_this.duration).ease("linear").attr("transform", "rotate(" + _this.rotateAngel_dot(value) + ")");        }        let timer_goalInit = setInterval(function () {            if (goal > 10) {                goal = 10;            }            text_goal.text(Math.floor(goal) + "级").attr("fill", _this.colorScale(goal * 10));            if (!(goal < value)) {                text_goal.text(Math.floor(value) + "级").attr("fill", _this.colorScale(value * 10));                clearInterval(timer_goalInit);            }            goal += value*50 / _this.duration;        }, 50);    }    //方法：弧度转角度    radianToAngel(rad) {        return rad * 180 / Math.PI;    }    //方法：画百分率线    drawRateLine(rate) {        let _this = this;        let line_width = _this.rateLineWidth;        let dot_rarius = _this.dotRadius;        let g_main = _this.svg.select(".g_main");        let g_rate = g_main.append("g").classed("g_rate", true)            .attr("transform", "translate(" + -line_width / 2 + "," + _this.radius * .9 + ")");                    g_rate.append("text")            .attr("x",-line_width*.28)            .attr("y",".3rem")            .attr("fill","#808080")            .style("font-size",".77rem")            .text("风险发生率");        let gray_line = g_rate.append("line").classed("gray_line", true)            .attr("x1", 0)            .attr("y1", 0)            .attr("x2", line_width)            .attr("y2", 0)            .attr("stroke", "#ddd")            .attr("stroke-width", dot_rarius)            ;        let blue_line = g_rate.append("line").classed("blue_line", true)            .attr("x1", 0)            .attr("y1", 0)            .attr("x2", 0)            .attr("y2", 0)            .attr("stroke", "#017adc")            .attr("stroke-width", dot_rarius);        //画点        for (let i = 0; i < 6; i++) {            g_rate.append("circle").classed("gray_dot", true)                .attr("cx", line_width * i / 5)                .attr("cy", 0)                .attr("r", dot_rarius / 2)                .attr("fill", "gray")        }        //        let g_rateNav = g_rate.append("g").classed("g_rateNav", true);        g_rateNav.append("circle")            .attr("cx", 0)            .attr("cy", 0)            .attr("r", dot_rarius)            .attr("fill", "#017adc");        g_rateNav.append("circle").classed("rate_value", true)            .attr("cx", 0)            .attr("cy", -dot_rarius * 6)            .attr("r", dot_rarius * 3.8)            .attr("fill", "#017adc");        let num1 = dot_rarius * 2.5;        let num2 = dot_rarius * 3.2;        g_rateNav.append("polygon")            .attr("fill", "#017adc")            .attr("points", `0,${-dot_rarius * 1.6} ${-num1},${-num2} ${num1},${-num2}`);        let rate_text = g_rateNav.append("text").classed("rate_text", true)            .attr("text-anchor", "middle")            .attr("y", -dot_rarius * 5)            .style("font-size", ".46rem")            .attr("fill", "#fff");        //初始化百分比        _this.initRate(rate);    }    //方法：初始化百分值    initRate(rate) {        rate = Number(rate);        let _this = this;        //定时器频率        let timer_break = 10;        //定时器每次加的百分值        let rate_split = rate*timer_break / _this.duration;        let g_rate = _this.svg.select(".g_rate");        let line_width = _this.rateLineWidth;        let blue_line = g_rate.select(".blue_line");        let g_rateNav = g_rate.select(".g_rateNav")        let rate_text = g_rate.select(".rate_text");        let _rate = 0;        let doneFlag = false;        let rate_timer = setInterval(function () {            _rate += rate_split;            if (_rate > rate) {                _rate = rate;                doneFlag = true;            }            //蓝线            blue_line.attr("x2", line_width*_rate/100);            //蓝线端点            g_rateNav.attr("transform", "translate(" + line_width * _rate / 100 + ",0)");            //百分比文字            rate_text.text(_rate.toFixed(2) + "%");            for (let i = 0; i < 5; i++) {                if (!(_rate < 20 * i)) {                    d3.select(g_rate.selectAll(".gray_dot")[0][i]).attr("fill", "black")                } else {                    break;                }            }            if (doneFlag) {                clearInterval(rate_timer);            }        }, timer_break);    }}
